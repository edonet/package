{
    "scope": "source.js",

    "completions":
    [
        // document
        {
            "trigger": "activeElement\tDocument",
            "contents": "activeElement"
        },
        {
            "trigger": "documentElement\tDocument",
            "contents": "documentElement"
        },
        {
            "trigger": "body\tDocument",
            "contents": "body"
        },
        {
            "trigger": "scripts\tDocument",
            "contents": "scripts"
        },
        {
            "trigger": "currentScript\tDocument",
            "contents": "currentScript"
        },
        {
            "trigger": "styleSheets\tDocument",
            "contents": "styleSheets"
        },
        {
            "trigger": "images\tDocument",
            "contents": "images"
        },
        {
            "trigger": "readyState\tDocument",
            "contents": "readyState"
        },
        {
            "trigger": "getElementById\tDocument",
            "contents": "getElementById(${1:id})"
        },
        {
            "trigger": "querySelector\tDocument",
            "contents": "querySelector(${1:selectors})"
        },
        {
            "trigger": "querySelectorAll\tDocument",
            "contents": "querySelectorAll(${1:selectors})"
        },
        {
            "trigger": "getElementsByClassName\tDocument",
            "contents": "getElementsByClassName(${1:className})"
        },
        {
            "trigger": "getElementsByName\tDocument",
            "contents": "getElementsByName(${1:name})"
        },
        {
            "trigger": "getElementsByTagName\tDocument",
            "contents": "getElementsByTagName(${1:tagName})"
        },
        {
            "trigger": "getElementsByTagNameNS\tDocument",
            "contents": "getElementsByTagNameNS(${1:namespace}, ${2:name})"
        },
        {
            "trigger": "createDocumentFragment\tDocument",
            "contents": "createDocumentFragment()"
        },
        {
            "trigger": "createElement\tDocument",
            "contents": "createElement(${1:tagName})"
        },
        {
            "trigger": "createElementNS\tDocument",
            "contents": "createElementNS(${1:namespaceURI}, ${2:qualifiedName})"
        },
        {
            "trigger": "createTextNode\tDocument",
            "contents": "createTextNode(${1:data})"
        },
        {
            "trigger": "createAttribute\tDocument",
            "contents": "createAttribute(${1:name})"
        },
        {
            "trigger": "execCommand\tDocument",
            "contents": "execCommand(${1:aCommandName}, ${2:aShowDefaultUI}, ${3:aValueArgument})"
        },
        {
            "trigger": "hasFocus\tDocument",
            "contents": "hasFocus()"
        },
        {
            "trigger": "write\tDocument",
            "contents": "write(${1:markup})"
        },
        {
            "trigger": "writeln\tDocument",
            "contents": "writeln(${1:line})"
        },

        // element
        {
            "trigger": "accessKey\tElement",
            "contents": "accessKey"
        },
        {
            "trigger": "attributes\tElement",
            "contents": "attributes"
        },
        {
            "trigger": "classList\tElement",
            "contents": "classList"
        },
        {
            "trigger": "className\tElement",
            "contents": "className"
        },
        {
            "trigger": "clientHeight\tElement",
            "contents": "clientHeight"
        },
        {
            "trigger": "clientLeft\tElement",
            "contents": "clientLeft"
        },
        {
            "trigger": "clientTop\tElement",
            "contents": "clientTop"
        },
        {
            "trigger": "clientWidth\tElement",
            "contents": "clientWidth"
        },
        {
            "trigger": "id\tElement",
            "contents": "id"
        },
        {
            "trigger": "innerHTML\tElement",
            "contents": "innerHTML"
        },
        {
            "trigger": "name\tElement",
            "contents": "name"
        },
        {
            "trigger": "onafterscriptexecute\tElement",
            "contents": "onafterscriptexecute"
        },
        {
            "trigger": "onbeforescriptexecute\tElement",
            "contents": "onbeforescriptexecute"
        },
        {
            "trigger": "outerHTML\tElement",
            "contents": "outerHTML"
        },
        {
            "trigger": "scrollHeight\tElement",
            "contents": "scrollHeight"
        },
        {
            "trigger": "scrollLeft\tElement",
            "contents": "scrollLeft"
        },
        {
            "trigger": "scrollTop\tElement",
            "contents": "scrollTop"
        },
        {
            "trigger": "scrollWidth\tElement",
            "contents": "scrollWidth"
        },
        {
            "trigger": "tagName\tElement",
            "contents": "tagName"
        },
        {
            "trigger": "getAttribute\tElement",
            "contents": "getAttribute(${1:attributeName})"
        },
        {
            "trigger": "getAttributeNS\tElement",
            "contents": "getAttributeNS(${1:namespace}, ${2:name})"
        },
        {
            "trigger": "getAttributeNode\tElement",
            "contents": "getAttributeNode(${1:attrName})"
        },
        {
            "trigger": "getAttributeNodeNS\tElement",
            "contents": "getAttributeNodeNS(${1:namespace}, ${2:nodeName})"
        },
        {
            "trigger": "getBoundingClientRect\tElement",
            "contents": "getBoundingClientRect()"
        },
        {
            "trigger": "getClientRects\tElement",
            "contents": "getClientRects()"
        },
        {
            "trigger": "hasAttribute\tElement",
            "contents": "hasAttribute(${1:attrName})"
        },
        {
            "trigger": "hasAttributeNS\tElement",
            "contents": "hasAttributeNS(${1:namespace}, ${2:localName])"
        },
        {
            "trigger": "insertAdjacentHTML\tElement",
            "contents": "insertAdjacentHTML(${1:position}, ${2:text})"
        },
        {
            "trigger": "removeAttribute\tElement",
            "contents": "removeAttribute(${1:attrName})"
        },
        {
            "trigger": "removeAttributeNS\tElement",
            "contents": "removeAttributeNS(${1:namespace}, ${2:attrName})"
        },
        {
            "trigger": "removeAttributeNode\tElement",
            "contents": "removeAttributeNode(${1:attributeNode})"
        },
        {
            "trigger": "setAttribute\tElement",
            "contents": "setAttribute(${1:name}, ${2:value})"
        },
        {
            "trigger": "setAttributeNS\tElement",
            "contents": "setAttributeNS(${1:namespace}, ${2:name}, ${3:value})"
        },
        {
            "trigger": "setAttributeNode\tElement",
            "contents": "setAttributeNode(${1:attribute})"
        },
        {
            "trigger": "setAttributeNodeNS\tElement",
            "contents": "setAttributeNodeNS(${1:attributeNode})"
        },

        // node
        {
            "trigger": "baseURI\tNode",
            "contents": "baseURI"
        },
        {
            "trigger": "childNodes\tNode",
            "contents": "childNodes"
        },
        {
            "trigger": "firstChild\tNode",
            "contents": "firstChild"
        },
        {
            "trigger": "lastChild\tNode",
            "contents": "lastChild"
        },
        {
            "trigger": "localName\tNode",
            "contents": "localName"
        },
        {
            "trigger": "namespaceURI\tNode",
            "contents": "namespaceURI"
        },
        {
            "trigger": "nextSibling\tNode",
            "contents": "nextSibling"
        },
        {
            "trigger": "nodeName\tNode",
            "contents": "nodeName"
        },
        {
            "trigger": "nodeType\tNode",
            "contents": "nodeType"
        },
        {
            "trigger": "nodeValue\tNode",
            "contents": "nodeValue"
        },
        {
            "trigger": "ownerDocument\tNode",
            "contents": "ownerDocument"
        },
        {
            "trigger": "parentElement\tNode",
            "contents": "parentElement"
        },
        {
            "trigger": "parentNode\tNode",
            "contents": "parentNode"
        },
        {
            "trigger": "prefix\tNode",
            "contents": "prefix"
        },
        {
            "trigger": "previousSibling\tNode",
            "contents": "previousSibling"
        },
        {
            "trigger": "textContent\tNode",
            "contents": "textContent"
        },
        {
            "trigger": "appendChild\tNode",
            "contents": "appendChild(${1:aChild})"
        },
        {
            "trigger": "cloneNode\tNode",
            "contents": "cloneNode(${1:deep})"
        },
        {
            "trigger": "compareDocumentPosition\tNode",
            "contents": "compareDocumentPosition(${1:otherNode})"
        },
        {
            "trigger": "contains\tNode",
            "contents": "contains(${1:otherNode})"
        },
        {
            "trigger": "hasAttributes\tNode",
            "contents": "hasAttributes()"
        },
        {
            "trigger": "hasChildNodes\tNode",
            "contents": "hasChildNodes()"
        },
        {
            "trigger": "insertBefore\tNode",
            "contents": "insertBefore(${1:newElement}, ${2:referenceElement})"
        },
        {
            "trigger": "isDefaultNamespace\tNode",
            "contents": "isDefaultNamespace(${1:namespaceURI})"
        },
        {
            "trigger": "isEqualNode\tNode",
            "contents": "isEqualNode(${1:arg})"
        },
        {
            "trigger": "lookupNamespaceURI\tNode",
            "contents": "lookupNamespaceURI()"
        },
        {
            "trigger": "lookupPrefix\tNode",
            "contents": "lookupPrefix()"
        },
        {
            "trigger": "normalize\tNode",
            "contents": "normalize()"
        },
        {
            "trigger": "removeChild\tNode",
            "contents": "removeChild(${1:child})"
        },
        {
            "trigger": "replaceChild\tNode",
            "contents": "replaceChild(${1:newChild}, ${2:oldChild})"
        }
    ]
}
